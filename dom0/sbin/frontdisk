#!/bin/bash
# shellcheck disable=SC2086,SC2128
set -feuo pipefail

trap "echo \"
 Usage: frontdisk --device=<vm>:<devname> --header=<file>
                  format [--skip-fs] [--skip-wipe]
                  open   [--skip-fs]
                  close
                  backup [--skip-close] <argument for 'btrfs send'>...


 Optional environment variables:

 FD_DEVICE FD_HEADER FD_BASEDIR FD_MAP FD_MNT FD_RECEIVE_SUBDIR
 FD_RECEIVE_ARGS FD_MOUNT_ARGS FD_MKFS_ARGS FD_LUKSOPEN_ARGS FD_LUKSFORMAT_ARGS
\"" EXIT

device=${FD_DEVICE-}
header=${FD_HEADER-}
integrity=hmac-sha256
skip_fs=''
skip_close=''
skip_wipe=''
cmd=()

for arg; do
    case "$arg" in
        --help|-h) exit 0 ;;
        --device=*|--header=*|--integrity=*) declare "${arg#--}" ;;
        --skip-fs|--skip-wipe|--skip-close) declare skip_"${arg##*-}"=x ;;
        *) cmd+=( "$arg" ) ;;
    esac
done

case "${cmd-}" in
    format|open|close) (( ${#cmd[@]} == 1 )) ;;
    backup) (( ${#cmd[@]} > 1 )) ;;
    *) exit 1 ;;
esac

[[ $cmd == format || $cmd == open || ! $skip_fs ]]
[[ $cmd == format || ! $skip_wipe ]]
[[ $cmd == backup || ! $skip_close ]]
[[ $device == ?*:?* && $header == ?* ]]

trap - EXIT


message() { echo "frontdisk: $1" >&2; }

basedir=${FD_BASEDIR-/run/frontdisk}
header_bytes=$(( 16 * 1024**2 ))
work_checkpoint=''

if [[ $cmd != close ]]; then
    find_blkfront() {
        qubesd-query -e --fail -- dom0 admin.vm.device.block.List dom0 "$1+$2" |
        sed 's/ description=.*//' |
        grep -aoE ' frontend-dev=xvd[a-z]+\b' |
        cut -d = -f 2
    }

    device_vm=${device%%:*}
    device_id=${device#*:}

    if ! blkfront=$(find_blkfront "$device_vm" "$device_id"); then
        echo N >/sys/module/xen_blkfront/parameters/trusted
        echo Y >/sys/module/block/parameters/no_part_scan
        qvm-block attach -- dom0 "$device"
        blkfront=$(find_blkfront "$device_vm" "$device_id")
        work_checkpoint=attached
    fi

    if qvm-run </dev/null --pass-io --filter-escape-chars -q -- "$device_vm" \
               bash -c "lsblk -dnro ROTA /dev/${device_id@Q} | grep -qx 1"; then
        # inherited by dm-crypt; Btrfs adds 'ssd' mount option if left at 0:
        echo 1 >/sys/block/"$blkfront"/queue/rotational
    fi
fi

if [[ $cmd == format ]]; then
    cryptsetup luksFormat --header="$header" \
                          --offset=$(( header_bytes / 512 )) \
                          --sector-size=4096 \
                          ${integrity:+--integrity="$integrity"} \
                          ${integrity:+${skip_wipe:+--integrity-no-wipe}} \
                          ${FD_LUKSFORMAT_ARGS-} -- /dev/"$blkfront"
    dirname -z -- "$header" | xargs -0 sync --
    stat -c %s -- "$header" | grep -qxF -- "$header_bytes" ||
    { message 'Unexpected header size!'; exit 1; }

    # prep for detached header loss: also store a copy on the device
    dd if="$header" of=/dev/"$blkfront" iflag=fullblock oflag=direct \
       bs=1M conv=fdatasync,nocreat
elif [[ $cmd != close ]]; then
    # prep for detached header loss: make emergency recovery undetectable
    untrusted_header=$basedir/untrusted-header-$device.img
    mkdir -p -- "$basedir"
    head -c "$header_bytes" /dev/"$blkfront" >"$untrusted_header"
    cmp -- "$header" "$untrusted_header"
    rm -- "$untrusted_header"
fi

uuid=$(cryptsetup luksUUID -- "$header")
map=${FD_MAP-frontdisk-$uuid}
mnt=${FD_MNT-$basedir/mnt-$uuid}

if [[ $cmd != close ]] &&
   [[ $work_checkpoint == attached || ! -e /dev/mapper/$map ]]; then
    # prep for detached header loss: something to remember, maybe
    sha256sum --tag -- "$header"

    cryptsetup luksOpen --header="$header" \
                        ${FD_LUKSOPEN_ARGS-} -- /dev/"$blkfront" "$map"
    work_checkpoint=mapped
fi

if [[ $cmd == format ]]; then
    if [[ ! $skip_wipe && ! $integrity ]]; then
        map_bytes=$(blockdev --getsize64 /dev/mapper/"$map")
        message "Wiping $map_bytes bytes..."
        dd if=/dev/zero of=/dev/mapper/"$map" iflag=fullblock oflag=direct \
           bs=1M conv=fdatasync,nocreat count="$map_bytes"B status=progress
    fi

    # --force is needed for --integrity-no-wipe, where dm-integrity refusing
    # reads from uninitialized sectors makes mkfs.btrfs unable to check that
    # there's no existing filesystem.
    [[ $skip_fs ]] ||
    mkfs.btrfs --force --checksum=xxhash ${FD_MKFS_ARGS-} /dev/mapper/"$map"
elif [[ $cmd != close && ! $skip_fs ]]; then
    if mountpoint -q -- "$mnt"; then
        [[ $cmd != open && $work_checkpoint != mapped ]] ||
        { message 'Already mounted!'; exit 1; }
    else
        [[ $mnt != "$basedir"/* ]] || mkdir -p -- "$mnt"
        mount -v -t btrfs ${FD_MOUNT_ARGS-} -- /dev/mapper/"$map" "$mnt"
    fi
fi

if [[ $cmd == backup ]]; then
    dst=$mnt/${FD_RECEIVE_SUBDIR-}
    mkdir -pv -- "$dst"
    btrfs send --proto=0 --compressed-data "${cmd[@]:1}" |
    btrfs receive ${FD_RECEIVE_ARGS-} -- "$dst"
fi

if [[ $cmd != open && ! $skip_close ]]; then
    { ! mountpoint -q -- "$mnt"; } || umount -v -- "$mnt"
    [[ $mnt != "$basedir"/* || ! -d $mnt ]] || rmdir -- "$mnt"
    [[ ! -e /dev/mapper/$map ]] || cryptsetup close --header="$header" -- "$map"
    qvm-block detach -- dom0 "$device"
    message 'Detached.'
fi
